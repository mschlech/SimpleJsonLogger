# Go parameters
GOCMD=go
GOBUILD=$(GOCMD) build
GOCLEAN=$(GOCMD) clean
GOTEST=$(GOCMD) test
GOGET=$(GOCMD) get
BINARY_NAME=simpleJsonLogger
BINARY_UNIX=$(BINARY_NAME)_unix
HAVE_DOCKER=$(shell docker version >/dev/null 2>&1 && echo have_docker)

all: init test build

init:
mkdir -p bin container

define make-cmd-target =
bin/$1: $(shell find cmd private/app/$1 private/lib gen -name '*.go')
        $(GOBUILD) -o bin/$1 -v ./cmd/$1
all:: bin/$1

ifdef HAVE_DOCKER
container/Dockerfile-$1: Dockerfile.template
        sed <Dockerfile.template >container/Dockerfile-$1 "s,APP,$1,g"

container/$1: bin/$1 container/Dockerfile-$1
        docker build -f container/Dockerfile-$1 -t lcm/$1 .
        touch container/$1

container:: container/$1

endif
endef

$(foreach _,$(APPS),$(eval $(call make-cmd-target,$_)))

build:
        $(GOBUILD) -o $(BINARY_NAME) -v
test:
        $(GOTEST) -v ./...
clean:
        $(GOCLEAN)
        rm -rf bin container gen
#run:
#        $(GOBUILD) -o $(BINARY_NAME) -v ./...
#        ./$(BINARY_NAME)
deps:
        $(GOGET) github.com/markbates/goth
        $(GOGET) github.com/markbates/pop


# Cross compilation
#build-linux:
#        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 $(GOBUILD) -o $(BINARY_UNIX) -v
#docker-build:
#        docker run --rm -it -v "$(GOPATH)":/go -w /go/src/bitbucket.org/rsohlich/makepost golang:latest go build -o "$(BINARY_UNIX)" -v
